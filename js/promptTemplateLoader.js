 /**\n * 提示词模板加载器\n * 用于加载各种聊天模式对应的提示词模板\n */\nconsole.log('提示词模板加载器初始化');\n
document.addEventListener('DOMContentLoaded', function() {\n  // 确保全局提示词模板对象存在\n  window.PROMPT_TEMPLATES = window.PROMPT_TEMPLATES || {};\n  window.PROMPT_TEMPLATES.chatModes = {};\n  \n  // 在API初始化完成后加载提示词模板\n  setTimeout(async function() {\n    await loadAllTemplates();\n  }, 1500);\n
  /**\n   * 加载所有提示词模板\n   */\n  async function loadAllTemplates() {\n    try {\n      console.log('开始加载提示词模板...');\n      \n      // 确保backendApi已初始化\n      if (!window.backendApi) {\n        console.error('后端API尚未初始化，无法加载提示词模板');\n        return;\n      }\n      \n      // 定义需要加载的模式\n      const modes = ['patent-search', 'patent-writing', 'patent-analysis'];\n      \n      // 对于每个模式，获取通用模板\n      for (const mode of modes) {\n        try {\n          // 调用API获取领域模板\n          const response = await getDomainTemplate('通用', mode);\n          if (response && response.template) {\n            window.PROMPT_TEMPLATES.chatModes[mode] = response.template;\n            console.log(已加载模式的提示词模板:, response.template);\n          }\n        } catch (modeError) {\n          console.error(加载模式模板失败:, modeError);\n        }\n      }\n      \n      console.log('聊天模式提示词模板加载完成:', window.PROMPT_TEMPLATES.chatModes);\n    } catch (error) {\n      console.error('加载提示词模板失败:', error);\n    }\n  }\n
  /**\n   * 获取领域特定模板\n   */\n  async function getDomainTemplate(domain, mode) {\n    try {\n      // 获取API的URL和认证令牌\n      const apiUrl = window.API_BASE_URL || 'http://localhost:3000/api';\n      const token = localStorage.getItem('xpat_auth_token');\n      \n      // 构建API请求\n      const url = ${apiUrl}/prompts/domain?domain=&mode=;\n      const options = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': token ? Bearer  : '',\n          'ngrok-skip-browser-warning': '1'\n        }\n      };\n      \n      // 发送请求\n      const response = await fetch(url, options);\n      \n      // 检查响应\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(获取领域模板失败: HTTP  - );\n        return null;\n      }\n      \n      // 解析并返回响应\n      return await response.json();\n    } catch (error) {\n      console.error('获取领域模板时出错:', error);\n      return null;\n    }\n  }\n  \n  // 公开到window对象以供其他模块使用\n  window.promptTemplateLoader = {\n    loadAllTemplates,\n    getDomainTemplate\n  };\n});
